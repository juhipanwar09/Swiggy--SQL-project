--Display all customers who live in 'Delhi'.
SELECT 
    *
FROM
    customers
WHERE
    city = 'Delhi';


--Find the average rating of all restaurants in 'Mumbai'.
SELECT 
    AVG(rating) AS avg_rt
FROM
    restaurants
GROUP BY city
HAVING city = 'Mumbai';


--List all customers who have placed at least one order.
SELECT DISTINCT
    customers.customer_id, customers.name
FROM
    customers
        INNER JOIN
    orders ON customers.customer_id = orders.customer_id;


--Display the total number of orders placed by each customer.
SELECT 
    customers.customer_id,
    customers.name,
    COUNT(orders.order_id) AS total_orders
FROM
    customers
        LEFT JOIN
    orders ON customers.customer_id = orders.customer_id
GROUP BY customers.customer_id , customers.name;


--Find the total revenue generated by each restaurant.
SELECT 
    restaurants.restaurant_id,
    restaurants.name,
    COALESCE(SUM(orders.total_amount), 0) AS total_revenue
FROM
    restaurants
        LEFT JOIN
    orders ON restaurants.restaurant_id = orders.restaurant_id
GROUP BY restaurants.restaurant_id , restaurants.name;


--Find the top 5 restaurants with the highest average rating.
SELECT 
    restaurant_id, name, ROUND(AVG(rating), 2) AS avg_rt
FROM
    restaurants
GROUP BY restaurant_id , name
ORDER BY avg_rt DESC
LIMIT 5;


--Display all customers who have never placed an order.
SELECT 
    customers.customer_id, customers.name
FROM
    customers
        LEFT JOIN
    orders ON customers.customer_id = orders.order_id
WHERE
    orders.customer_id IS NULL;


--Find the number of orders placed by each customer in 'Mumbai'.
SELECT 
    customers.customer_id,
    customers.name,
    COUNT(orders.order_id) AS total_orders
FROM
    customers
        LEFT JOIN
    orders ON orders.customer_id = customers.customer_id
WHERE
    customers.city = 'Mumbai'
GROUP BY customers.customer_id , customers.name;


--Display all orders placed in the last 30 days.
SELECT 
    *
FROM
    orders
WHERE
    order_date >= CURDATE() - INTERVAL 30 DAY;

--List all delivery partners who have completed more than 1 delivery.
SELECT DISTINCT
    deliverypartners.partner_id, deliverypartners.name
FROM
    deliverypartners
        JOIN
    orderdelivery ON deliverypartners.partner_id = orderdelivery.partner_id
        JOIN
    deliveryupdates ON orderdelivery.order_delivery_id = deliveryupdates.delivery_id
WHERE
    deliveryupdates.status = 'Delivered';


--Find the customers who have placed orders on exactly three different days.
SELECT 
    customers.customer_id,
    customers.name,
    COUNT(orders.order_date)
FROM
    customers
        JOIN
    orders ON customers.customer_id = orders.order_id
GROUP BY customers.customer_id , customers.name
HAVING COUNT(DISTINCT orders.order_date) = 3;


--Find the delivery partner who has worked with the most different customers.
SELECT 
    deliverypartners.partner_id,
    deliverypartners.name,
    COUNT(DISTINCT orders.customer_id) AS customer_count
FROM
    deliverypartners
        JOIN
    orderdelivery ON deliverypartners.partner_id = orderdelivery.partner_id
        JOIN
    orders ON orderdelivery.order_id = orders.order_id
GROUP BY deliverypartners.partner_id , deliverypartners.name
ORDER BY customer_count DESC
LIMIT 1;


--Identify customers who have the same city and have placed orders at the same restaurants, but on different dates.
select c1.name as customer1,
	   c2.name as customer2,
       c1.city as city1,
       c2.city as city2,
	restaurants.name
from customers as c1
     join orders as o1 on c1.customer_id = o1.customer_id
	 jOIN orders as o2 on o2.restaurant_id = o1.restaurant_id
     join customers as c2 on c1.city = c2.city and c1.name <> c2.name
and o2.customer_id = c2.customer_id
join
restaurants on o1.restaurant_id = restaurants.restaurant_id
where o1.order_date <> o2.order_date;
